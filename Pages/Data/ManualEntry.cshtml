@page
@model SmartLab.Pages.Data.ManualEntryModel
@{
    ViewData["Title"] = "Manual Data Entry";
}

<div class="d-flex justify-content-between align-items-center mb-3">
    <h1>Upload Dataset Manually</h1>
    <div>
        <a href="/Data/DataIndex" class="btn btn-secondary">
            <i class="fas fa-arrow-left"></i> Back to Datasets
        </a>
    </div>
</div>

<div class="card">
    <div class="card-body">
        <form method="post" enctype="multipart/form-data">
            <div class="mb-3">
                <label class="form-label">Dataset Name:</label>
                <input class="form-control" asp-for="DatasetName" required />
            </div>
            <div class="mb-3">
                <label class="form-label">Dataset Date:</label>
                <input class="form-control" type="datetime-local" id="dataset_Date_time" asp-for="DatasetDateTime" required />
                <span asp-validation-for="DatasetDateTime" class="text-danger"></span>
                <div class="form-text">Select the date and time when this dataset was created.</div>
            </div>
            <div class="mb-3">
                <label class="form-label">Dataset Description <small class="text-muted">(Optional)</small>:</label>
                <textarea class="form-control" asp-for="DatasetDescription" rows="3" placeholder="Enter a description for your dataset (optional)"></textarea>
                <span asp-validation-for="DatasetDescription" class="text-danger"></span>
                <div class="form-text">You can leave this field empty if you don't want to add a description.</div>
            </div>
            <div class="mb-3">
                <label class="form-label">Dataset File:</label>
                <input class="form-control" type="file" name="file" required/>
            </div>
            <div class="mt-4">
                <button class="btn btn-success" type="submit">
                    <i class="fas fa-upload"></i> Upload
                </button>
            </div>
        </form>
    </div>
</div>


<script>
    document.addEventListener('DOMContentLoaded', function() {
        const dateTimeInput = document.getElementById("dataset_Date_time");
        
        // Format current date and time for datetime-local input
        const now = new Date();
        
        // Adjust for local timezone to avoid UTC offset issues
        const localDateTime = new Date(now.getTime() - (now.getTimezoneOffset() * 60000));
        
        // Format to datetime-local format: YYYY-MM-DDTHH:MM
        const formatted = localDateTime.toISOString().slice(0, 16);
        
        // Only set if the field is empty (prevents overriding server values)
        if (!dateTimeInput.value) {
            dateTimeInput.value = formatted;
            console.log("Set datetime field to:", formatted);
        }
        
        // Add client-side validation
        dateTimeInput.addEventListener('change', function() {
            const selectedDate = new Date(this.value);
            const now = new Date();
            
            if (isNaN(selectedDate.getTime())) {
                this.setCustomValidity('Please enter a valid date and time.');
            } else if (selectedDate > now) {
                this.setCustomValidity('Date cannot be in the future.');
            } else {
                this.setCustomValidity('');
            }
        });
        
        // Set max date to current datetime
        const maxDateTime = localDateTime.toISOString().slice(0, 16);
        dateTimeInput.setAttribute('max', maxDateTime);
        
        // Debug: Check description field validation
        const descriptionTextarea = document.querySelector('textarea[name="DatasetDescription"]');
        if (descriptionTextarea) {
            console.log('Description field found:', descriptionTextarea);
            console.log('Description required attribute:', descriptionTextarea.hasAttribute('required'));
            console.log('Description validation message:', descriptionTextarea.validationMessage);
            
            // Ensure it's explicitly not required
            descriptionTextarea.removeAttribute('required');
            descriptionTextarea.setAttribute('aria-required', 'false');
            
            // Add event listener to debug validation
            descriptionTextarea.addEventListener('invalid', function(e) {
                console.log('Description field validation error:', e.target.validationMessage);
                // Prevent default validation since this field should be optional
                e.preventDefault();
                e.target.setCustomValidity('');
            });
        }
    });
</script>