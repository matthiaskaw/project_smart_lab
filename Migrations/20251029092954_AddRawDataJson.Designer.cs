// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartLab.Domains.Data.Database;

#nullable disable

namespace smartlab.Migrations
{
    [DbContext(typeof(SmartLabDbContext))]
    [Migration("20251029092954_AddRawDataJson")]
    partial class AddRawDataJson
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("SmartLab.Domains.Data.Models.DataPointEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("DatasetId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int>("RowIndex")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("TEXT");

                    b.Property<string>("Unit")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ParameterName");

                    b.HasIndex("RowIndex");

                    b.HasIndex("DatasetId", "Timestamp");

                    b.ToTable("DataPoints");
                });

            modelBuilder.Entity("SmartLab.Domains.Data.Models.DatasetEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<int>("DataSource")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("DeviceId")
                        .HasColumnType("TEXT");

                    b.Property<int>("EntryMethod")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FilePath")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.Property<string>("OriginalFilename")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("RawDataJson")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CreatedDate");

                    b.HasIndex("DataSource");

                    b.HasIndex("DeviceId");

                    b.ToTable("Datasets");
                });

            modelBuilder.Entity("SmartLab.Domains.Data.Models.DeviceConfigurationEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConfigurationJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeviceType");

                    b.HasIndex("IsActive");

                    b.HasIndex("Name");

                    b.ToTable("DeviceConfigurations");
                });

            modelBuilder.Entity("SmartLab.Domains.Data.Models.ValidationErrorEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("datetime('now')");

                    b.Property<Guid>("DatasetId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ErrorType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ParameterName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("RowIndex")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DatasetId");

                    b.HasIndex("ErrorType");

                    b.ToTable("ValidationErrors");
                });

            modelBuilder.Entity("SmartLab.Domains.Data.Models.DataPointEntity", b =>
                {
                    b.HasOne("SmartLab.Domains.Data.Models.DatasetEntity", "Dataset")
                        .WithMany("DataPoints")
                        .HasForeignKey("DatasetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dataset");
                });

            modelBuilder.Entity("SmartLab.Domains.Data.Models.ValidationErrorEntity", b =>
                {
                    b.HasOne("SmartLab.Domains.Data.Models.DatasetEntity", "Dataset")
                        .WithMany("ValidationErrors")
                        .HasForeignKey("DatasetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dataset");
                });

            modelBuilder.Entity("SmartLab.Domains.Data.Models.DatasetEntity", b =>
                {
                    b.Navigation("DataPoints");

                    b.Navigation("ValidationErrors");
                });
#pragma warning restore 612, 618
        }
    }
}
